--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/close/LNCloseProcessorImpl.java
+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/close/LNCloseProcessorImpl.java
@@ -113,8 +113,8 @@
     }
 
     private boolean checkFee (LNCloseAMessage message) {
-        return message.feePerByte > serverObject.configuration.MIN_FEE_PER_BYTE_CLOSING &&
-                message.feePerByte < serverObject.configuration.MAX_FEE_PER_BYTE_CLOSING;
+        return message.feePerByte > serverObject.getConfiguration().MIN_FEE_PER_BYTE_CLOSING &&
+                message.feePerByte < serverObject.getConfiguration().MAX_FEE_PER_BYTE_CLOSING;
     }
 
     private List<TransactionSignature> getTransactionSignatures (Transaction transaction) {
@@ -151,12 +151,12 @@
 
         //This gets called as well when the connection breaks down and we connect back to the other party
         //For now we take it that we may negotiate a close with a different fee
-        Transaction closingTransaction = getClosingTransaction(closingStatus, serverObject.configuration.DEFAULT_FEE_PER_BYTE_CLOSING);
+        Transaction closingTransaction = getClosingTransaction(closingStatus, serverObject.getConfiguration().DEFAULT_FEE_PER_BYTE_CLOSING);
         sendCloseMessage(getTransactionSignatures(closingTransaction));
     }
 
     private void sendCloseMessage (List<TransactionSignature> signatureList) {
-        LNClose close = messageFactory.getLNCloseAMessage(channelHashToClose, signatureList, serverObject.configuration.DEFAULT_FEE_PER_BYTE_CLOSING);
+        LNClose close = messageFactory.getLNCloseAMessage(channelHashToClose, signatureList, serverObject.getConfiguration().DEFAULT_FEE_PER_BYTE_CLOSING);
         messageExecutor.sendMessageUpwards(close);
 
     }
