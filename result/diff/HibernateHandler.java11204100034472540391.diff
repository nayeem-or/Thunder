--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java
+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java
@@ -484,7 +484,7 @@
                         paymentWrapper = new PaymentWrapper();
                         payments.add(paymentWrapper);
                         paymentWrapper.paymentData = payment;
-                        paymentWrapper.sender = nodeKey;
+                        paymentWrapper.setSender(nodeKey);
                         paymentWrapper.statusSender = EMBEDDED;
 
                         PeeledOnion onion = null;
@@ -525,7 +525,7 @@
                     if (Objects.equals(paymentWrapper.receiver, nodeKey)) {
                         paymentWrapper.statusReceiver = REDEEMED;
                         paymentWrapper.statusSender = TO_BE_REDEEMED;
-                    } else if (Objects.equals(paymentWrapper.sender, nodeKey)) {
+                    } else if (Objects.equals(paymentWrapper.getSender(), nodeKey)) {
                         paymentWrapper.statusSender = REDEEMED;
                     } else {
                         throw new RuntimeException("Neither of the parties involved in payment is the one who got here?");
@@ -541,7 +541,7 @@
                     if (Objects.equals(paymentWrapper.receiver, nodeKey)) {
                         paymentWrapper.statusReceiver = REFUNDED;
                         paymentWrapper.statusSender = TO_BE_REFUNDED;
-                    } else if (Objects.equals(paymentWrapper.sender, nodeKey)) {
+                    } else if (Objects.equals(paymentWrapper.getSender(), nodeKey)) {
                         paymentWrapper.statusSender = REFUNDED;
                     } else {
                         throw new RuntimeException("Neither of the parties involved in payment is the one who got here?");
@@ -598,7 +598,7 @@
         List<PaymentData> paymentList = new ArrayList<>();
         for (PaymentWrapper p : payments) {
             if (sender) {
-                if (nodeKey.equals(p.sender)) {
+                if (nodeKey.equals(p.getSender())) {
                     if (p.statusSender == searchFor) {
                         p.statusSender = replaceWith;
                         paymentList.add(p.paymentData);
@@ -636,7 +636,7 @@
                     });
 
             payments.stream()
-                    .filter(p -> Objects.equals(p.sender, nodeKey))
+                    .filter(p -> Objects.equals(p.getSender(), nodeKey))
                     .filter(p -> paymentList.contains(p.paymentData))
                     .forEach(p -> {
                         if (p.statusSender == CURRENTLY_EMBEDDING) {
@@ -869,7 +869,7 @@
                 if (p.equals(paymentWrapper)) {
                     p.paymentData = paymentWrapper.paymentData;
                     p.receiver = paymentWrapper.receiver;
-                    p.sender = paymentWrapper.sender;
+                    p.setSender(paymentWrapper.getSender());
                     p.statusReceiver = paymentWrapper.statusReceiver;
                     p.statusSender = paymentWrapper.statusSender;
                     return;
@@ -923,7 +923,7 @@
         synchronized (payments) {
             for (PaymentWrapper payment : payments) {
                 if (payment.paymentData.secret.equals(paymentSecret)) {
-                    return payment.sender;
+                    return payment.getSender();
                 }
             }
             return null;
