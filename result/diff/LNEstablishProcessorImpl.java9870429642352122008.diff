--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/LNEstablishProcessorImpl.java
+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/LNEstablishProcessorImpl.java
@@ -109,7 +109,7 @@
  *  In:
  *  txInA1
  *  txInA2
- *  [?]
+ *  [???]
  *
  *  Out:
  *  2-of-2
@@ -119,10 +119,10 @@
  *  In:
  *  txInA1
  *  txInA2
- *  [?]
+ *  [???]
  *  txInB1
  *  txInB2
- *  [?]
+ *  [???]
  *
  *  Out:
  *  2-of-2
@@ -190,7 +190,7 @@
 
     @Override
     public void onLayerActive (MessageExecutor messageExecutor) {
-        setNode(node.nodeKey);
+        setNodegetNodeKey()odeKey);
         this.messageExecutor = messageExecutor;
         channelManager.addChannelOpener(getNode(), this);
         sendNextLayerActiveIfOpenChannelExists();
@@ -203,7 +203,7 @@
     }
 
     private void sendNextLayerActiveIfOpenChannelExists () {
-        List<Channel> openChannel = dbHandler.getOpenChannel(node.nodeKey);
+        List<Channel> openChannel = dbHandler.getOpenChannelgetNodeKey()odeKey);
         if (openChannel.size() > 0) {
             startScheduledBroadcasting();
             messageExecutor.sendNextLayerActive();
@@ -263,7 +263,7 @@
         if (testProgressReceivingMessageAmount(0)) {
             //TODO test for validity of establish settings
             //TODO test if inputs are paying adequate fees and are paying from SegWit outputs
-            this.establishProgress.channel.nodeKeyClient = node.nodeKey;
+            this.establishProgress.channel.nodeKeyClient =getNodeKey()odeKey;
             message.saveToChannel(establishProgress.channel);
             establishProgress.messages.add(message);
             if (establishProgress.weStartedExchange) {
@@ -420,7 +420,7 @@
         Channel channel = establishProgress.channel;
         PubkeyChannelObject channelObject = new PubkeyChannelObject();
         channelObject.pubkeyA = serverObject.pubKeyServer.getPubKey();
-        channelObject.pubkeyB = node.nodeKey.getPubKey();
+        channelObject.pubkeyB =getNodeKey()odeKey.getPubKey();
         channelObject.pubkeyA1 = channel.keyServer.getPubKey();
         channelObject.pubkeyB1 = channel.keyClient.getPubKey();
         channelObject.timestamp = Tools.currentTime();
@@ -429,7 +429,7 @@
         //TODO fill in some usable data into ChannelStatusObject
         ChannelStatusObject statusObject = new ChannelStatusObject();
         statusObject.pubkeyA = serverObject.pubKeyServer.getPubKey();
-        statusObject.pubkeyB = node.nodeKey.getPubKey();
+        statusObject.pubkeyB =getNodeKey()odeKey.getPubKey();
         statusObject.timestamp = Tools.currentTime();
 
         broadcastHelper.broadcastNewObject(channelObject);
