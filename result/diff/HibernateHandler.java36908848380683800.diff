--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java
+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java
@@ -483,7 +483,7 @@
                     if (!payment.sending) {
                         paymentWrapper = new PaymentWrapper();
                         payments.add(paymentWrapper);
-                        paymentWrapper.paymentData = payment;
+                        paymentWrapper.setPaymentData(payment);
                         paymentWrapper.sender = nodeKey;
                         paymentWrapper.statusSender = EMBEDDED;
 
@@ -557,7 +557,7 @@
         synchronized (payments) {
             for (PaymentWrapper payment : payments) {
                 if (payment.statusSender == EMBEDDED && payment.statusReceiver == TO_BE_EMBEDDED) {
-                    if (Tools.currentTime() - payment.paymentData.timestampOpen > Constants.PAYMENT_TIMEOUT) {
+                    if (Tools.currentTime() - payment.getPaymentData().timestampOpen > Constants.PAYMENT_TIMEOUT) {
                         payment.statusReceiver = UNKNOWN;
                         payment.statusSender = TO_BE_REFUNDED;
                     }
@@ -601,14 +601,14 @@
                 if (nodeKey.equals(p.sender)) {
                     if (p.statusSender == searchFor) {
                         p.statusSender = replaceWith;
-                        paymentList.add(p.paymentData);
+                        paymentList.add(p.getPaymentData());
                     }
                 }
             } else {
                 if (nodeKey.equals(p.receiver)) {
                     if (p.statusReceiver == searchFor) {
                         p.statusReceiver = replaceWith;
-                        paymentList.add(p.paymentData);
+                        paymentList.add(p.getPaymentData());
                     }
                 }
             }
@@ -856,7 +856,7 @@
         PaymentWrapper paymentWrapper = new PaymentWrapper();
         paymentWrapper.receiver = nodeKey;
         paymentWrapper.statusReceiver = TO_BE_EMBEDDED;
-        paymentWrapper.paymentData = paymentData;
+        paymentWrapper.setPaymentData(paymentData);
         synchronized (payments) {
             payments.add(paymentWrapper);
         }
@@ -867,7 +867,7 @@
         synchronized (payments) {
             for (PaymentWrapper p : payments) {
                 if (p.equals(paymentWrapper)) {
-                    p.paymentData = paymentWrapper.paymentData;
+                    p.setPaymentData(paymentWrapper.getPaymentData());
                     p.receiver = paymentWrapper.receiver;
                     p.sender = paymentWrapper.sender;
                     p.statusReceiver = paymentWrapper.statusReceiver;
@@ -922,7 +922,7 @@
     public NodeKey getSenderOfPayment (PaymentSecret paymentSecret) {
         synchronized (payments) {
             for (PaymentWrapper payment : payments) {
-                if (payment.paymentData.secret.equals(paymentSecret)) {
+                if (payment.getPaymentData().secret.equals(paymentSecret)) {
                     return payment.sender;
                 }
             }
